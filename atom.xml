<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡玉娥的个人博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-10T14:25:50.300Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/04/10/react/"/>
    <id>http://yoursite.com/2017/04/10/react/</id>
    <published>2017-04-10T14:25:50.300Z</published>
    <updated>2017-04-10T14:25:50.300Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript的DOM操作</title>
    <link href="http://yoursite.com/2017/03/10/javascript%E7%9A%84DOM%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/03/10/javascript的DOM操作/</id>
    <published>2017-03-10T02:25:40.000Z</published>
    <updated>2017-04-10T08:20:10.200Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-获取节点"><a href="#1-获取节点" class="headerlink" title="1.获取节点"></a>1.获取节点</h4><h4 id="1-1-document"><a href="#1-1-document" class="headerlink" title="1.1 document"></a>1.1 document</h4><ul>
<li><p>获取ID   如果ID值重复了只能获取一个，ID可以不用获取在js中直接使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法：document.getElementById</div><div class="line">兼容性：兼容所有浏览器，但是在IE6~7之间id名不区分大小写，在标准浏览器下区分大小写</div></pre></td></tr></table></figure>
</li>
<li><p>通过标签名获取一组标签（获取的是类数组）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法：document.getElementTagName</div><div class="line">兼容性：兼容所有浏览器</div></pre></td></tr></table></figure>
<ul>
<li>通过类名获取一组元素    （类数组）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">语法：var li1 = document.getElementsByClassName(&apos;li1&apos;);   获取一组</div><div class="line">     var li1 = document.getElementsByClassName(&apos;li1&apos;)[0]  获取第一个</div><div class="line">兼容：IE不兼容     </div><div class="line">兼容方法:</div><div class="line">&lt;script&gt;</div><div class="line">   function getByClass(classStr,context) &#123;</div><div class="line">       context=context||document;</div><div class="line">       if(&apos;getComputedStyle&apos; in window) &#123;</div><div class="line">           return Array.prototype.slice.call(context.getElementsByClassName(classStr));</div><div class="line">       &#125;else &#123;</div><div class="line">           //IE678</div><div class="line">           //1.把字符串转成数组：数组中的每一项都是calss名：先取出首尾空格，再通过空格切分成数组</div><div class="line">           var aryClass=classStr.replace(/(^ +)|( +$)/g,&apos;&apos;).split(/\s+/g);</div><div class="line">           var nodeList=context.getElementsByClassName(&apos;*&apos;);</div><div class="line">           var ary=[];</div><div class="line">           for(var i=0;i&lt;nodeList.length;i++)&#123;</div><div class="line">               //当前容器下的每个元素</div><div class="line">               var cur=nodeList[i];</div><div class="line">               //假设法：假设该元素包含数组中的每一项；</div><div class="line">               var bOk=true;</div><div class="line">               //验证当前容器下的每个元素，是否包含数组中的每个class名</div><div class="line">               for(var j=0; j&lt;aryClass.length;j++)&#123;</div><div class="line">                   //保证每个class名必须是独立的个体;</div><div class="line">                   var reg=new RegExp(&apos;(^| +)&apos;+aryClass[j]+&apos;( +|$)&apos;);</div><div class="line">                   if(!reg.test(cur.className))&#123;</div><div class="line">                       bOk=false;</div><div class="line">                       break;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               if(bOk)&#123;</div><div class="line">                   ary.push(cur);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           return ary;</div><div class="line">   </div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   var res=getByClass(&apos;box3&apos;);</div><div class="line">   console.log(res);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>通过name的值获取元素（一般用于表单元素，获取一组元素）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法：var input = document.getElementsByName(&apos;sex&apos;);</div><div class="line">兼容：在ie浏览器下只对表单元素起作用</div></pre></td></tr></table></figure>
<ul>
<li>获取body元素  获取一个html元素</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法：document.body   document.documentElement</div><div class="line">兼容：兼容所有浏览器</div></pre></td></tr></table></figure>
<ul>
<li>获取可视窗口的高/宽</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法:document.documentElement.clientWidth/clientHeight||document.body.clientWidth/clientHeight;</div><div class="line">兼容：不兼容 所以用document.body.clientWidth兼容IE</div></pre></td></tr></table></figure>
<ul>
<li>获取元素 （支持类名，id名，标签名，后代选择器）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法:document.querySelector(获取一个元素)  document.querySelectorAll （获取一个元素）</div><div class="line">兼容:不兼容，一般用在移动端获取元素</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="1-2-节点指针"><a href="#1-2-节点指针" class="headerlink" title="1.2 节点指针"></a>1.2 节点指针</h4><ul>
<li><p>firstChild 获取第一个元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">语法：父节点.firstChild;</div><div class="line">作用：获取元素的首个子节点</div><div class="line">兼容写法： 父节点.firstElementChild||父节点.firstChild</div><div class="line">function lastChild(curEle)&#123;</div><div class="line">        var aChild=this.getChildren(curEle);</div><div class="line">        return aChild[aChild.length-1];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>lastChild 获取最后一个元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">语法：父节点.lastChild;</div><div class="line">作用：获取元素的最后一个子节点</div><div class="line">兼容写法：父节点.lastElementChild||父节点.lastChild</div><div class="line">function lastChild(curEle)&#123;</div><div class="line">     var aChild=this.getChildren(curEle);</div><div class="line">     return aChild[aChild.length-1];</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>childNodes 获取元素的所有子节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法:父节点.childNodes</div><div class="line">作用：获取元素的所有子节点</div></pre></td></tr></table></figure>
<ul>
<li>previousSibling 获取上一个哥哥节点</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">语法：兄弟节点.previousSibling</div><div class="line">兼容写法: 兄弟节点.previousElementSibling || 兄弟节点.previousSibling</div><div class="line"> function prev(curEle)&#123;</div><div class="line">         if(&apos;getComputedStyle&apos; in window)&#123;</div><div class="line">             return curEle.previousElementSibling;</div><div class="line">         &#125;</div><div class="line">         var pre=curEle.previousSibling;</div><div class="line">         while(pre &amp;&amp; pre.nodeType!==1)&#123;</div><div class="line">             pre=pre.previousSibling;</div><div class="line">         &#125;</div><div class="line">         return pre;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>nextSibling  获取上一个弟弟节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">语法：兄弟节点.previousSibling</div><div class="line">兼容写法: 兄弟节点.previousElementSibling || 兄弟节点.previousSibling</div><div class="line"> function next(curEle)&#123;</div><div class="line">        if(flg)&#123;</div><div class="line">            return curEle.nextElementSibling;</div><div class="line">        &#125;</div><div class="line">        var nex=curEle.nextSibling;</div><div class="line">        while(nex &amp;&amp; nex.nodeType!==1)&#123;</div><div class="line">            nex=nex.nextSibling;</div><div class="line">        &#125;</div><div class="line">        return nex;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>parentNode 获取已知节点的父节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">语法：兄弟节点.parentNode</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2-节点操作"><a href="#2-节点操作" class="headerlink" title="2.节点操作"></a>2.节点操作</h4><h4 id="2-1-创建节点"><a href="#2-1-创建节点" class="headerlink" title="2.1 创建节点"></a>2.1 创建节点</h4><ul>
<li>createElement   创建元素节点<ul>
<li>语法:document.createElement(元素标签)</li>
</ul>
</li>
<li>createAttribute   创建属性节点<ul>
<li>语法:document.createAttribute(元素属性)</li>
</ul>
</li>
<li><p>createTextNode 创建文本节点</p>
<ul>
<li>语法:document.createTextNode(文本内容)</li>
</ul>
<h4 id="2-2插入节点"><a href="#2-2插入节点" class="headerlink" title="2.2插入节点"></a>2.2插入节点</h4><ul>
<li>appendChild </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法:document.appendChild(所添加的新节点)</div><div class="line">功能:向节点的子节点列表的末尾添加新的子节点</div></pre></td></tr></table></figure>
<ul>
<li>insertBefore </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法：已知子节点.insertBefore(所要添加的新节点（新），已知子节点（旧）)</div><div class="line">功能:在已知的子节点前插入一个新的子节点</div></pre></td></tr></table></figure>
<h4 id="2-3-替换节点"><a href="#2-3-替换节点" class="headerlink" title="2.3 替换节点"></a>2.3 替换节点</h4><ul>
<li>replaceChild </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">语法：当前元素.replaceChild(新元素，旧元素);</div><div class="line">功能:将某个子节点替换成另一个</div><div class="line">&lt;html&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;ul id=&quot;myList&quot;&gt;&lt;li&gt;Coffee&lt;/li&gt;&lt;li&gt;Tea&lt;/li&gt;&lt;li&gt;Milk&lt;/li&gt;&lt;/ul&gt;</div><div class="line"></div><div class="line">&lt;p id=&quot;demo&quot;&gt;点击按钮来替换列表中的首个项目。&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;button onclick=&quot;myFunction()&quot;&gt;试一下&lt;/button&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">function myFunction()</div><div class="line">&#123;</div><div class="line">var textnode=document.createTextNode(&quot;Water&quot;);</div><div class="line">var item=document.getElementById(&quot;myList&quot;).childNodes[0];</div><div class="line">item.replaceChild(textnode,item.childNodes[0]);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;p&gt;首先创建一个新的文本节点。&lt;br&gt;然后替换首个列表项中的首个子节点。&lt;/p&gt;</div><div class="line">&lt;p&gt;&lt;b&gt;注释：&lt;/b&gt;本例用文本节点 &quot;Water&quot; 替换文本节点 &quot;Coffee&quot;，而不是整个 LI 元素，这是替换节点的另一种方法。&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="2-4-复制节点"><a href="#2-4-复制节点" class="headerlink" title="2.4 复制节点"></a>2.4 复制节点</h4><ul>
<li>cloneNode </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">语法:需要被复制的节点.cloneNode(true/false)</div><div class="line">功能:创建指定节点的副本</div><div class="line">参数:true 复制当前节点及其所有子节点</div><div class="line">  false 仅复制当前的节点</div></pre></td></tr></table></figure>
<h4 id="2-5-删除节点"><a href="#2-5-删除节点" class="headerlink" title="2.5 删除节点"></a>2.5 删除节点</h4></li>
<li>removeChild<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">语法:removeChild(要删除的节点)</div><div class="line">功能：删除指定的节点</div><div class="line"> 语法结构:</div><div class="line"> fatherObj.removeChild(childrenObj)</div><div class="line"> 参数解释:</div><div class="line"> 1.fatherObj:要删除子元素的元素对象。</div><div class="line"> 2.childrenObj:要被删除的子元素对象。</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="3-属性操作"><a href="#3-属性操作" class="headerlink" title="3. 属性操作"></a>3. 属性操作</h4><h4 id="3-1-获取属性"><a href="#3-1-获取属性" class="headerlink" title="3.1 获取属性"></a>3.1 获取属性</h4><ul>
<li><p>getAttribute</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法:元素节点.getAttribute(元素的属性名)</div><div class="line">功能:获取元素节点中指定的属性的属性值</div></pre></td></tr></table></figure>
<h4 id="3-2-设置属性"><a href="#3-2-设置属性" class="headerlink" title="3.2 设置属性"></a>3.2 设置属性</h4><ul>
<li>setAttribute</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法:元素节点.setAttribute（属性名，属性值）</div><div class="line">功能:创建或改变元素节点的属性</div></pre></td></tr></table></figure>
<h4 id="3-3-删除属性"><a href="#3-3-删除属性" class="headerlink" title="3.3 删除属性"></a>3.3 删除属性</h4><ul>
<li>removeAttribute</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">语法:元素节点.removeAttribute（属性名）</div><div class="line">功能:删除元素中的指定属性</div></pre></td></tr></table></figure>
<h4 id="4-文本操作-XML"><a href="#4-文本操作-XML" class="headerlink" title="4.文本操作  XML"></a>4.文本操作  XML</h4></li>
<li><p>要插入内容的文本.insertData（offset,String） 从offset指定的位置插入string    offset是偏移量   string想插入的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">xmlDoc=loadXMLDoc(&quot;books.xml&quot;);</div><div class="line">x=xmlDoc.getElementsByTagName(&quot;title&quot;)[0].childNodes[0];</div><div class="line"></div><div class="line">x.insertData(0,&quot;Cooking: &quot;);</div><div class="line">document.write(x.data);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>appendData（string）   将string插入到文本节点的末尾处</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xmlDoc=loadXMLDoc(&quot;books.xml&quot;);</div><div class="line">x=xmlDoc.getElementsByTagName(&quot;title&quot;)[0].childNodes[0];</div><div class="line">x.appendData(&quot; Cooking&quot;);</div><div class="line">document.write(x.data);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>deleteData（offset,count） 从offset起删除count个字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xmlDoc=loadXMLDoc(&quot;books.xml&quot;);</div><div class="line">x=xmlDoc.getElementsByTagName(&quot;title&quot;)[0].childNodes[0];</div><div class="line">x.deleteData(0,9);</div><div class="line">document.write(x.data);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>replaceData(off,count,string)  从off将count个字符用string替换</p>
</li>
<li><p>splitData（offset） splitText（offset） 从offset起将文本节点分成两个节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">xmlDoc=loadXMLDoc(&quot;books_cdata.xml&quot;);</div><div class="line">x=xmlDoc.getElementsByTagName(&quot;html&quot;)[0].childNodes[0];</div><div class="line">y=x.splitText(8);</div><div class="line">document.write(x.nodeValue);</div><div class="line">document.write(&quot;&quot;);</div><div class="line">document.write(y.nodeValue);</div></pre></td></tr></table></figure>
</li>
<li><p>substring （offset,count）  返回offset起的count个节点</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-获取节点&quot;&gt;&lt;a href=&quot;#1-获取节点&quot; class=&quot;headerlink&quot; title=&quot;1.获取节点&quot;&gt;&lt;/a&gt;1.获取节点&lt;/h4&gt;&lt;h4 id=&quot;1-1-document&quot;&gt;&lt;a href=&quot;#1-1-document&quot; class=&quot;head
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cookie和localStorage的区别</title>
    <link href="http://yoursite.com/2016/10/01/IE/"/>
    <id>http://yoursite.com/2016/10/01/IE/</id>
    <published>2016-10-01T06:25:22.000Z</published>
    <updated>2017-04-10T14:31:21.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-cookie和localStorage的区别共同点-都是存储在浏览器端的区别"><a href="#1-cookie和localStorage的区别共同点-都是存储在浏览器端的区别" class="headerlink" title="1.cookie和localStorage的区别共同点 都是存储在浏览器端的区别"></a>1.cookie和localStorage的区别共同点 都是存储在浏览器端的区别</h3><ul>
<li><p>第一个区别（存储）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.cookie：cookie数据始终在同源的http请求中携带（即使不需要），</div><div class="line"> 即cookie在浏览器和服务器之间来回传递。</div></pre></td></tr></table></figure>
</li>
<li><p>第二个区别（大小）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.cookie：可以限制cookie只属于某个路径下，存储大小限制不同，cookie数据不能超过4k</div><div class="line">2.localStorage：比cookie大很多，最大8M</div></pre></td></tr></table></figure>
</li>
<li><p>第三个区别（有效期）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.cookie：只在设置的cookie过期时间之前有效</div><div class="line">2.localStorage：始终有效，窗口或浏览器关闭一直保存，因此用作持久保存数据</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-session和cookie的区别"><a href="#2-session和cookie的区别" class="headerlink" title="2.session和cookie的区别"></a>2.session和cookie的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cookie:</div><div class="line">     1.数据存放在客户端浏览器上</div><div class="line">     2.不是很安全，可以在本地修改cookie</div><div class="line">     3.没有安全性问题的时候可以用cookie</div><div class="line">     </div><div class="line">session:</div><div class="line">    1.数据存放在服务器上</div><div class="line">    2.session相对安全</div><div class="line">    3.session有过期时间，在时间内保存在服务器上，当访问次数太多，会比较占用服务器的性能，所以在这种情况下应该选cookie</div></pre></td></tr></table></figure>
<p>#图片垂直居中 vertical-align:middle;</p>
<h3 id="1-IE6兼容问题"><a href="#1-IE6兼容问题" class="headerlink" title="1.IE6兼容问题"></a>1.IE6兼容问题</h3><h4 id="1-lt-DOCTYPE-HTML-gt-文档类型声明"><a href="#1-lt-DOCTYPE-HTML-gt-文档类型声明" class="headerlink" title="1.&lt;!DOCTYPE HTML&gt;文档类型声明"></a>1.&lt;!DOCTYPE HTML&gt;文档类型声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">产生条件：IE6浏览器，当我们没有书写这个文档声明的时候，会触发IE6浏览器怪异解析现象</div><div class="line">解决方法：书写文档声明</div><div class="line">自己理解：在低版本浏览器必须要写文档声明，不然会报错</div></pre></td></tr></table></figure>
<h4 id="2-横向双倍外边距（块属性标签float后，又有横向的margin情况下，在IE6显示margin比设置的大）"><a href="#2-横向双倍外边距（块属性标签float后，又有横向的margin情况下，在IE6显示margin比设置的大）" class="headerlink" title="2.横向双倍外边距（块属性标签float后，又有横向的margin情况下，在IE6显示margin比设置的大）"></a>2.横向双倍外边距（块属性标签float后，又有横向的margin情况下，在IE6显示margin比设置的大）</h4><ul>
<li>有横向外边距的时侯在IE6里双倍显示<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：在IE6中块元素浮动后，会出现横向双倍margin现象</div><div class="line">解决方法：在float标签的样式控制中加入display：inline</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="3-默认行高"><a href="#3-默认行高" class="headerlink" title="3.默认行高"></a>3.默认行高</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：IE6、IE7、遨游浏览器；设置的文字高度超出盒模型内容区域设置的高度时会影响布局</div><div class="line">解决方法：给超出高度的标签设置overflow：hidden；或者将文字的行高line-height设置为小于块的高度</div></pre></td></tr></table></figure>
<h4 id="3-默认行高2"><a href="#3-默认行高2" class="headerlink" title="3.默认行高2"></a>3.默认行高2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">产生条件：清除浮动的时候，写一个空div用&#123;clear：both&#125;，在大部分浏览器没事，在IE6中即使是空的也会有默认行高</div><div class="line">解决放法：设置高度为0，并设置overflow：hidden。</div><div class="line"></div><div class="line">&#123;height:0;/overflow:hidden;/clear:both;&#125;  line-height:0; font-size:0;</div></pre></td></tr></table></figure>
<h4 id="4-经典3像素bug"><a href="#4-经典3像素bug" class="headerlink" title="4.经典3像素bug"></a>4.经典3像素bug</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：IE6浏览器，浮动块元素与未浮动块元素处于同一行，有默认的3像素间距</div><div class="line">解决方法：设置非浮动元素浮动</div></pre></td></tr></table></figure>
<h4 id="5-a标签hover不适用于所偶遇标签"><a href="#5-a标签hover不适用于所偶遇标签" class="headerlink" title="5.a标签hover不适用于所偶遇标签"></a>5.a标签hover不适用于所偶遇标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：IE6浏览器中hover中支持a标签的使用，不支持一切其他标签使用；</div><div class="line">解决方法：用javascript模拟a的hover效果；</div></pre></td></tr></table></figure>
<h4 id="6-table标签当中border-color属性设置无效"><a href="#6-table标签当中border-color属性设置无效" class="headerlink" title="6.table标签当中border-color属性设置无效"></a>6.table标签当中border-color属性设置无效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：IE6中table设置属性border-color无效；</div><div class="line">解决方法：运用CSS样式进行控制，而不是使用属性进行样式的处理</div></pre></td></tr></table></figure>
<h4 id="7-png格式图片"><a href="#7-png格式图片" class="headerlink" title="7.png格式图片"></a>7.png格式图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：IE6浏览器，不支持透明</div><div class="line">解决方法：使用javascript进行处理；或者使用gif、jpg图片替换掉png图片的使用</div></pre></td></tr></table></figure>
<h4 id="8-透明rgba与opacity"><a href="#8-透明rgba与opacity" class="headerlink" title="8.透明rgba与opacity"></a>8.透明rgba与opacity</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：IE6不支持此两种透明的设置方法；</div><div class="line">解决办法：使用IE6当中的滤镜filter替换掉，如：opacity：0.6;   filter:alpha(opacity=60)</div></pre></td></tr></table></figure>
<h4 id="9-子代选择器在IE6中不能使用"><a href="#9-子代选择器在IE6中不能使用" class="headerlink" title="9.子代选择器在IE6中不能使用"></a>9.子代选择器在IE6中不能使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：IE6浏览器，使用E&gt;F子选择器；</div><div class="line">解决办法：采用其他选择器或者后代选择器进行控制。</div></pre></td></tr></table></figure>
<h4 id="10-不支持最大最小宽高"><a href="#10-不支持最大最小宽高" class="headerlink" title="10.不支持最大最小宽高"></a>10.不支持最大最小宽高</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">产生条件：IE浏览器，标签的最低高度/宽度设置</div><div class="line"></div><div class="line">.min_width&#123; min-width:300px; width:300px;_width:300px;width:auto;&#125;</div><div class="line"></div><div class="line">解决于方法：为IE6单独设置hack，即_height：最小高度值；_width：最小宽度值（对于IE6,当实际宽度超出定义的宽高时，元素会自动调整宽高）。对于最大宽度和最大高度，没有必要设置兼容，当前对开发者来说，只需要保证IE6下正常运行即可；</div><div class="line"></div><div class="line">hack：一般针对不同的浏览器写不同的css，叫做css hack</div></pre></td></tr></table></figure>
<h4 id="11-li的间距问题"><a href="#11-li的间距问题" class="headerlink" title="11.li的间距问题"></a>11.li的间距问题</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：IE6浏览器 li标签设置宽高，且li里面的元素发生了浮动；</div><div class="line">    处理方法：方法1：li不设置宽高；   方法2：li内部的标签不进行浮动   3.设置vertical-align:middle;</div></pre></td></tr></table></figure>
<h4 id="12-img图片下部高度多余5px"><a href="#12-img图片下部高度多余5px" class="headerlink" title="12.img图片下部高度多余5px"></a>12.img图片下部高度多余5px</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：IE6浏览器</div><div class="line">处理方法:将图片转化块级对象，即display：block</div></pre></td></tr></table></figure>
<h4 id="13-IE6不支持fixed"><a href="#13-IE6不支持fixed" class="headerlink" title="13.IE6不支持fixed"></a>13.IE6不支持fixed</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">解决办法：IE6设成绝对定位position：absolute</div></pre></td></tr></table></figure>
<h3 id="2-其他浏览器兼容问题"><a href="#2-其他浏览器兼容问题" class="headerlink" title="2.其他浏览器兼容问题"></a>2.其他浏览器兼容问题</h3><h4 id="1-不同浏览器当中，很多标签的默认样式不同，如默认的外补丁内补丁"><a href="#1-不同浏览器当中，很多标签的默认样式不同，如默认的外补丁内补丁" class="headerlink" title="1.不同浏览器当中，很多标签的默认样式不同，如默认的外补丁内补丁"></a>1.不同浏览器当中，很多标签的默认样式不同，如默认的外补丁内补丁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：不同浏览器</div><div class="line">解决办法：利用CSS reset文件进行样式的清楚，然后再根据需要进行设置；</div></pre></td></tr></table></figure>
<h4 id="2-img外部的border"><a href="#2-img外部的border" class="headerlink" title="2.img外部的border"></a>2.img外部的border</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件:img外部有a标签，即img标签有连接时</div><div class="line">解决方法：设置img边框border：0；</div></pre></td></tr></table></figure>
<h4 id="3-默认图片有间距"><a href="#3-默认图片有间距" class="headerlink" title="3.默认图片有间距"></a>3.默认图片有间距</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">产生条件：img标签（每个img之后敲了回车）</div><div class="line">解决方法：为img设置float的浮动布局方式</div><div class="line"></div><div class="line">     备注: 因为img标签是行内属性标签，所以只要不超出容器宽度，img标签都会排在一行里，但是部分浏览器的img标签之间会有个间距。去掉这个间距使用float是正道。(最佳解决方案:display:block)</div></pre></td></tr></table></figure>
<h4 id="4-input聚焦框颜色与样式不同"><a href="#4-input聚焦框颜色与样式不同" class="headerlink" title="4.input聚焦框颜色与样式不同"></a>4.input聚焦框颜色与样式不同</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：各个浏览器表现不同</div><div class="line">处理方法：使用outline:none,清除默认样式之后再统一设置</div></pre></td></tr></table></figure>
<h4 id="5-子标签无法设置父标签的高度"><a href="#5-子标签无法设置父标签的高度" class="headerlink" title="5.子标签无法设置父标签的高度"></a>5.子标签无法设置父标签的高度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">产生条件：父标签内部含一个或多个子标签，父标签没有设置浮动，而子标签发生浮动</div><div class="line">处理方法：</div><div class="line">1.在子标签最后添加清除浮动的设置&lt;div style=&quot;height:0;clear:both&quot;&gt;&lt;/div&gt;</div><div class="line">2.为父标签添加overflow：hidden;的样式</div><div class="line">3.为父标签设置固定的高度</div></pre></td></tr></table></figure>
<h4 id="6-行内元素布局混乱"><a href="#6-行内元素布局混乱" class="headerlink" title="6.行内元素布局混乱"></a>6.行内元素布局混乱</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：行内元素包含框时，如果包含框包含的绝对定位元素以百分比为单位进行定义；</div><div class="line">处理方法：在行内元素当中加&#123;zoom:1&#125;,触发IE的hasLayout。</div></pre></td></tr></table></figure>
<h4 id="7-多显示一个字"><a href="#7-多显示一个字" class="headerlink" title="7.多显示一个字"></a>7.多显示一个字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">产生条件：多个浮动元素中间夹杂HTML注释语句，浮动元素宽度设置为100%；则在下一行多显示一个上一行的最后一个字符；</div><div class="line">解决方法：删除注释</div></pre></td></tr></table></figure>
<h4 id="8-z-index不起作用的-bug"><a href="#8-z-index不起作用的-bug" class="headerlink" title="8.z-index不起作用的 bug"></a>8.z-index不起作用的 bug</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1)ie6下 z-index无论设置多高都不起作用情况。这种情况发生的条件有三个：1.父标签position属性为relative；2.问题标签含有浮动(float)</div><div class="line">2）所有浏览器</div><div class="line">  层级的高低不仅要看自己，还要看自己的父级</div><div class="line">  父标签position属性为reative或absolute时，子标签的absolute属性相对于父标签而言的，而在IE6下，层级的表现有时候不是子标签的z-index多高，而要看他们的父标签的z-index谁高谁低</div></pre></td></tr></table></figure>
<h3 id="CSS-hack"><a href="#CSS-hack" class="headerlink" title="CSS hack"></a>CSS hack</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">由于不同厂商的流览器或某浏览器的不同版本（如IE6-IE11,Firefox/Safari/Opera/Chrome等），对CSS的支持、解析不一样，导致在不同浏览器的环境中呈现出不一致的页面展现效果。这时，我们为了获得统一的页面效果，就需要针对不同的浏览器或不同版本写特定的CSS样式，我们把这个针对不同的浏览器/不同版本写相应的CSS code的过程，叫做CSS hack!</div></pre></td></tr></table></figure>
<h4 id="1-css-hack-3中表现形式"><a href="#1-css-hack-3中表现形式" class="headerlink" title="1.css hack 3中表现形式"></a>1.css hack 3中表现形式</h4><ul>
<li><p>条件注释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">CSS hack方式一：条件注释法</div><div class="line">　</div><div class="line">这种方式是IE浏览器专有的Hack方式，微软官方推荐使用的hack方式。举例如下</div><div class="line">	只在IE下生效</div><div class="line">	&lt;!--[if IE]&gt;</div><div class="line">	这段文字只在IE浏览器显示</div><div class="line">	&lt;![endif]--&gt;</div><div class="line">	</div><div class="line">	只在IE6下生效</div><div class="line">	&lt;!--[if IE 6]&gt;</div><div class="line">	这段文字只在IE6浏览器显示</div><div class="line">	&lt;![endif]--&gt;</div><div class="line">	</div><div class="line">	只在IE6以上版本生效</div><div class="line">	&lt;!--[if gte IE 6]&gt;</div><div class="line">	这段文字只在IE6以上(包括)版本IE浏览器显示</div><div class="line">	&lt;![endif]--&gt;</div><div class="line">	</div><div class="line">	只在IE8上不生效</div><div class="line">	&lt;!--[if ! IE 8]&gt;</div><div class="line">	这段文字在非IE8浏览器显示</div><div class="line">	&lt;![endif]--&gt;</div><div class="line">	</div><div class="line">	非IE浏览器生效</div><div class="line">	&lt;!--[if !IE]&gt;</div><div class="line">	这段文字只在非IE浏览器显示</div><div class="line">	&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>类内属性前缀法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">属性前缀法是在CSS样式属性名前加上一些只有特定浏览器才能识别的hack前缀，以达到预期的页面展现效果。</div><div class="line">IE浏览器各版本 CSS hack 对照表</div><div class="line">hack	写法	实例	IE6(S)	IE6(Q)	IE7(S)	IE7(Q)	IE8(S)	IE8(Q)	IE9(S)	IE9(Q)	IE10(S)	IE10(Q)</div><div class="line">*	*color	青色	Y	Y	Y	Y	N	Y	N	Y	N	Y</div><div class="line">+	+color	绿色	Y	Y	Y	Y	N	Y	N	Y	N	Y</div><div class="line">-	-color	黄色	Y	Y	N	N	N	N	N	N	N	N</div><div class="line">_	_color	蓝色	Y	Y	N	Y	N	Y	N	Y	N	N</div><div class="line">#	#color	紫色	Y	Y	Y	Y	N	Y	N	Y	N	Y</div><div class="line">\0	color:red\0	红色	N	N	N	N	Y	N	Y	N	Y	N</div><div class="line">\9\0	color:red\9\0	粉色	N	N	N	N	N	N	Y	N	Y	N</div><div class="line">!important	color:blue !important;color:green;	棕色	N	N	Y	N	Y	N	Y	N	Y	Y</div><div class="line"></div><div class="line">说明：在标准模式中</div><div class="line">	•	“-″减号是IE6专有的hack</div><div class="line">	•	“\9″ IE6/IE7/IE8/IE9/IE10都生效</div><div class="line">	•	“\0″ IE8/IE9/IE10都生效，是IE8/9/10的hack</div><div class="line">	•	“\9\0″ 只对IE9/IE10生效，是IE9/10的hack</div></pre></td></tr></table></figure>
</li>
<li><p>选择器前缀法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">选择器前缀法是针对一些页面表现不一致或者需要特殊对待的浏览器，在CSS选择器前加上一些只有某些特定浏览器才能识别的前缀进行hack。</div><div class="line">目前最常见的是</div><div class="line">*html *前缀只对IE6生效</div><div class="line">*+html *+前缀只对IE7生效</div><div class="line">@media screen\9&#123;...&#125;只对IE6/7生效</div><div class="line">@media \0screen &#123;body &#123; background: red; &#125;&#125;只对IE8有效</div><div class="line">@media \0screen\,screen\9&#123;body &#123; background: blue; &#125;&#125;只对IE6/7/8有效</div><div class="line">@media screen\0 &#123;body &#123; background: green; &#125;&#125; 只对IE8/9/10有效</div><div class="line">@media screen and (min-width:0\0) &#123;body &#123; background: gray; &#125;&#125; 只对IE9/10有效</div><div class="line">@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) &#123;body &#123; background: orange; &#125;&#125; 只对IE10有效</div><div class="line">等等</div><div class="line">结合CSS3的一些选择器，如html:first-child，body:nth-of-type(1)，衍生出更多的hack方式，</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2-css-hack利弊"><a href="#2-css-hack利弊" class="headerlink" title="2.css hack利弊"></a>2.css hack利弊</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">一般情况下，我们尽量避免使用CSS hack，但是有些情况为了顾及用户体验实现向下兼容，不得已才使用hack。比如由于IE8及以下版本不支持CSS3,而我们的项目页面使用了大量CSS3新属性在IE9/Firefox/Chrome下正常渲染，这种情况下如果不使用css3pie或htc或条件注释等方法时,可能就得让IE8-的专属hack出马了。使用hack虽然对页面表现的一致性有好处，但过多的滥用会造成html文档混乱不堪，增加管理和维护的负担。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-cookie和localStorage的区别共同点-都是存储在浏览器端的区别&quot;&gt;&lt;a href=&quot;#1-cookie和localStorage的区别共同点-都是存储在浏览器端的区别&quot; class=&quot;headerlink&quot; title=&quot;1.cookie和loc
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node基础</title>
    <link href="http://yoursite.com/2016/09/30/index/"/>
    <id>http://yoursite.com/2016/09/30/index/</id>
    <published>2016-09-30T06:25:22.000Z</published>
    <updated>2017-04-10T10:55:56.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-node是什么"><a href="#1-node是什么" class="headerlink" title="1.node是什么"></a>1.node是什么</h3>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.Node.js是一个基于chrome V8的JavaScript运行时的环境</div><div class="line">2.Node.js是事件驱动，非阻塞式I/O模型</div><div class="line">3.Node.js使用npm包管理器</div><div class="line">4.使用Node.js不仅实现了一个应用，也实现了整个HTTP服务器，所以不需要单独搭建Apache或nginx</div><div class="line">5.Node 是一个服务器端 JavaScript 解释器，它将改变服务器应该如何工作的概念。它的目标是帮助程序员构建高度可伸缩的应用程序，编写能够处理数万条同时连接到一个（只有一个）物理机的连接代码。</div></pre></td></tr></table></figure>
<h3 id="2-NODE-js的安装"><a href="#2-NODE-js的安装" class="headerlink" title="2.NODE.js的安装"></a>2.NODE.js的安装</h3><ul>
<li>node下载官网   <a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a> </li>
<li><p>mac方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install node</div></pre></td></tr></table></figure>
</li>
<li><p>window</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v 查看版本号</div></pre></td></tr></table></figure>
</li>
<li><p>查看包管理器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -v</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-node是什么&quot;&gt;&lt;a href=&quot;#1-node是什么&quot; class=&quot;headerlink&quot; title=&quot;1.node是什么&quot;&gt;&lt;/a&gt;1.node是什么&lt;/h3&gt;   &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
    
  </entry>
  
</feed>
